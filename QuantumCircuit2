!pip install Qiskit
!pip install numpt
!pip install strawberryfields

import numpy as np

import matplotlib.pyplot as plt

from qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister, Aer, execute

import strawberryfields as sf

from strawberryfields.ops import *



# Number of runs to perform

num_runs = 1000



# Initialize a dictionary to store the measurement results

measurement_results = {'0': 0, '1': 0}



for _ in range(num_runs):

    # Qiskit part: Prepare the initial state of the qubit to be teleported

    n_qubits = 2

    qreg = QuantumRegister(n_qubits)

    creg = ClassicalRegister(n_qubits)

    circ = QuantumCircuit(qreg, creg)



    # Prepare the initial state (|psi> = |1>) on qubit 0 that we want to teleport

    circ.x(qreg[0])



    # Perform the Bell measurement on qubits 0 and 1

    circ.h(qreg[0])

    circ.cx(qreg[0], qreg[1])

    circ.measure(qreg[0], creg[0])

    circ.measure(qreg[1], creg[1])



    # Execute the circuit on a simulator

    backend = Aer.get_backend('qasm_simulator')

    job = execute(circ, backend, shots=1)

    measurement_result = list(job.result().get_counts(circ).keys())[0]



    # Strawberry Fields part: Create the entangled resource state and apply the teleportation protocol

    prog = sf.Program(num_subsystems=2)

    with prog.context as q:

        # Prepare a two-mode squeezed vacuum state (an entangled resource state)

        S2gate(1) | (q[0], q[1])



        # Apply the displacement operation based on the measurement result of qubit 0

        Dgate(np.sqrt(np.pi) * (-1 if measurement_result[1] == '1' else 1)) | q[0]



        # Apply the conditional phase operation based on the measurement result of qubit 1

        if measurement_result[0] == '1':

            Zgate(np.pi) | q[1]



    eng = sf.Engine("fock", backend_options={"cutoff_dim": 10})

    state = eng.run(prog)



    # Decode the continuous-variable state back into a qubit state

    decoded_statevector = np.array([state.state.wigner(1, np.sqrt(np.pi), 0), -state.state.wigner(1, -np.sqrt(np.pi), 0)])



    # Qiskit part: Perform any necessary qubit-based operations on the decoded state

    decoded_qreg = QuantumRegister(n_qubits)

    decoded_creg = ClassicalRegister(1)

    decoded_circ = QuantumCircuit(decoded_qreg, decoded_creg)



    # Apply any necessary qubit-based operations on the decoded state

    # In this example, we will apply a Hadamard gate to the decoded qubit state

    decoded_circ.h(decoded_qreg[0])



    # Measure the decoded qubit state

    decoded_circ.measure(decoded_qreg[0], decoded_creg[0])



    # Execute the circuit on a simulator

    decoded_backend = Aer.get_backend('statevector_simulator')

    decoded_job = execute(decoded_circ, decoded_backend, initial_statevector=decoded_statevector)

    decoded_measurement_result = list(decoded_job.result().get_counts(decoded_circ).keys())[0]



    # Update the measurement results dictionary

    measurement_results[decoded_measurement_result] += 1



# Plot the histogram of the measurement results

plt.bar(measurement_results.keys(), measurement_results.values())

plt.xlabel('Measurement result')

plt.ylabel('Frequency')

plt.title('Histogram of measurement results over {} runs'.format(num_runs))

plt.show()
